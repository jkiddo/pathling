"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[194],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,c=i(t,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(g,o(o({ref:e},c),{},{components:n})):a.createElement(g,o({ref:e},c))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(7294),r=n(6010);const l={tabItem:"tabItem_Ymn6"};function o(t){let{children:e,hidden:n,className:o}=t;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:n},e)}},4866:(t,e,n)=>{n.d(e,{Z:()=>b});var a=n(7462),r=n(7294),l=n(6010),o=n(2466),i=n(6550),s=n(1980),p=n(7392),c=n(12);function u(t){return function(t){return r.Children.map(t,(t=>{if(!t||(0,r.isValidElement)(t)&&function(t){const{props:e}=t;return!!e&&"object"==typeof e&&"value"in e}(t))return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(t).map((t=>{let{props:{value:e,label:n,attributes:a,default:r}}=t;return{value:e,label:n,attributes:a,default:r}}))}function d(t){const{values:e,children:n}=t;return(0,r.useMemo)((()=>{const t=e??u(n);return function(t){const e=(0,p.l)(t,((t,e)=>t.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(t),t}),[e,n])}function m(t){let{value:e,tabValues:n}=t;return n.some((t=>t.value===e))}function g(t){let{queryString:e=!1,groupId:n}=t;const a=(0,i.k6)(),l=function(t){let{queryString:e=!1,groupId:n}=t;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((t=>{if(!l)return;const e=new URLSearchParams(a.location.search);e.set(l,t),a.replace({...a.location,search:e.toString()})}),[l,a])]}function h(t){const{defaultValue:e,queryString:n=!1,groupId:a}=t,l=d(t),[o,i]=(0,r.useState)((()=>function(t){let{defaultValue:e,tabValues:n}=t;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find((t=>t.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:l}))),[s,p]=g({queryString:n,groupId:a}),[u,h]=function(t){let{groupId:e}=t;const n=function(t){return t?`docusaurus.tab.${t}`:null}(e),[a,l]=(0,c.Nk)(n);return[a,(0,r.useCallback)((t=>{n&&l.set(t)}),[n,l])]}({groupId:a}),k=(()=>{const t=s??u;return m({value:t,tabValues:l})?t:null})();(0,r.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:o,selectValue:(0,r.useCallback)((t=>{if(!m({value:t,tabValues:l}))throw new Error(`Can't select invalid tab value=${t}`);i(t),p(t),h(t)}),[p,h,l]),tabValues:l}}var k=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(t){let{className:e,block:n,selectedValue:i,selectValue:s,tabValues:p}=t;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),d=t=>{const e=t.currentTarget,n=c.indexOf(e),a=p[n].value;a!==i&&(u(e),s(a))},m=t=>{let e=null;switch(t.key){case"Enter":d(t);break;case"ArrowRight":{const n=c.indexOf(t.currentTarget)+1;e=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(t.currentTarget)-1;e=c[n]??c[c.length-1];break}}e?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},e)},p.map((t=>{let{value:e,label:n,attributes:o}=t;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,key:e,ref:t=>c.push(t),onKeyDown:m,onClick:d},o,{className:(0,l.Z)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":i===e})}),n??e)})))}function v(t){let{lazy:e,children:n,selectedValue:a}=t;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const t=l.find((t=>t.props.value===a));return t?(0,r.cloneElement)(t,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((t,e)=>(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==a}))))}function f(t){const e=h(t);return r.createElement("div",{className:(0,l.Z)("tabs-container",y.tabList)},r.createElement(N,(0,a.Z)({},t,e)),r.createElement(v,(0,a.Z)({},t,e)))}function b(t){const e=(0,k.Z)();return r.createElement(f,(0,a.Z)({key:String(e)},t))}},5652:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),o=n(5162);const i={sidebar_position:4,description:"The Pathling library provides a set of functions for querying a FHIR terminology server from within your queries and transformations."},s="Terminology functions",p={unversionedId:"libraries/terminology",id:"libraries/terminology",title:"Terminology functions",description:"The Pathling library provides a set of functions for querying a FHIR terminology server from within your queries and transformations.",source:"@site/docs/libraries/terminology.md",sourceDirName:"libraries",slug:"/libraries/terminology",permalink:"/docs/libraries/terminology",draft:!1,editUrl:"https://github.com/aehrc/pathling/tree/main/site/docs/libraries/terminology.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"The Pathling library provides a set of functions for querying a FHIR terminology server from within your queries and transformations."},sidebar:"libraries",previous:{title:"FHIRPath query",permalink:"/docs/libraries/fhirpath-query"},next:{title:"Kafka integration",permalink:"/docs/libraries/kafka"}},c={},u=[{value:"Value set membership",id:"value-set-membership",level:3},{value:"Concept translation",id:"concept-translation",level:3},{value:"Subsumption testing",id:"subsumption-testing",level:3},{value:"Retrieving properties",id:"retrieving-properties",level:3},{value:"Retrieving designations",id:"retrieving-designations",level:3},{value:"Multi-language support",id:"multi-language-support",level:3},{value:"Authentication",id:"authentication",level:3}],d={toc:u},m="wrapper";function g(t){let{components:e,...n}=t;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"terminology-functions"},"Terminology functions"),(0,r.kt)("p",null,"The library also provides a set of functions for querying a FHIR terminology\nserver from within your queries and transformations."),(0,r.kt)("h3",{id:"value-set-membership"},"Value set membership"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"member_of")," function can be used to test the membership of a code within a\n",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/valueset.html"},"FHIR value set"),". This can be used with both\nexplicit value sets (i.e. those that have been pre-defined and loaded into the\nterminology server) and implicit value sets (e.g. SNOMED CT\n",(0,r.kt)("a",{parentName:"p",href:"http://snomed.org/ecl"},"Expression Constraint Language"),")."),(0,r.kt)("p",null,'In this example, we take a list of SNOMED CT diagnosis codes and create a new\ncolumn which shows which are viral infections. We use an ECL expression to\ndefine viral infection as a disease with a pathological process of "Infectious\nprocess", and a causative agent of "Virus".'),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pathling import PathlingContext, to_snomed_coding, to_ecl_value_set, member_of\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv("conditions.csv")\n\nVIRAL_INFECTION_ECL = """\n    << 64572001|Disease| : (\n      << 370135005|Pathological process| = << 441862004|Infectious process|,\n      << 246075003|Causative agent| = << 49872002|Virus|\n    )\n"""\n\ncsv.select(\n        "CODE",\n        "DESCRIPTION",\n        member_of(\n                to_snomed_coding(csv.CODE),\n                to_ecl_value_set(VIRAL_INFECTION_ECL)\n        ).alias("VIRAL_INFECTION"),\n).show()\n'))),(0,r.kt)(o.Z,{value:"r",label:"R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\ncsv <- pathling_spark(pc) %>%\n        spark_read_csv(path = 'conditions.csv', header = TRUE)\n\nVIRAL_DISEASE_ECL <- '<< 64572001|Disease| : (\n      << 370135005|Pathological process| = << 441862004|Infectious process|,\n      << 246075003|Causative agent| = << 49872002|Virus|\n    )'\n\ncsv %>%\n        mutate(\n                CODE,\n                DESCRIPTION,\n                IS_VIRAL_DISEASE = !!tx_member_of(!!tx_to_snomed_coding(CODE), !!tx_to_ecl_value_set(VIRAL_DISEASE_ECL)),\n                .keep = \"none\"\n        ) %>%\n        show()\n\npc %>% pathling_disconnect()\n"))),(0,r.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.sql.Terminology._\nimport au.csiro.pathling.library.TerminologyHelpers._\n\nval pc = PathlingContext.create()\nval csv = pc.getSpark.read.csv("conditions.csv")\n\nval VIRAL_INFECTION_ECL =\n    """\n    << 64572001|Disease| : (\n      << 370135005|Pathological process| = << 441862004|Infectious process|,\n      << 246075003|Causative agent| = << 49872002|Virus|\n    )\n"""\n\ncsv.select(\n    csv.col("CODE"),\n    csv.col("DESCRIPTION"),\n    member_of(toCoding(csv.col("CODE"), "http://snomed.info/sct"),\n        toEclValueSet(VIRAL_INFECTION_ECL)).alias("VIRAL_INFECTION")\n).show()\n'))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.library.TerminologyHelpers.*;\nimport static au.csiro.pathling.sql.Terminology.*;\n\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        String VIRAL_INFECTION_ECL = """\n                    << 64572001|Disease| : (\n                      << 370135005|Pathological process| = << 441862004|Infectious process|,\n                      << 246075003|Causative agent| = << 49872002|Virus|\n                    )\n                """;\n\n        csv.select(\n                csv.col("CODE"),\n                csv.col("DESCRIPTION"),\n                member_of(toSnomedCoding(csv.col("CODE")),\n                        toEclValueSet(VIRAL_INFECTION_ECL)).alias(\n                        "VIRAL_INFECTION")\n        ).show();\n    }\n}\n\n')))),(0,r.kt)("p",null,"Results in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"CODE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"VIRAL_INFECTION"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"65363002"),(0,r.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16114001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"43878008"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat"),(0,r.kt)("td",{parentName:"tr",align:null},"false")))),(0,r.kt)("h3",{id:"concept-translation"},"Concept translation"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"translate")," function can be used to translate codes from one code system to\nanother using maps that are known to the terminology server. In this example, we\ntranslate our SNOMED CT diagnosis codes\ninto ",(0,r.kt)("a",{parentName:"p",href:"https://digital.nhs.uk/services/terminology-and-classifications/read-codes"},"Read CTV3"),"."),(0,r.kt)("p",null,"Please note that the\ntype of the output column is the array of coding structs, as the translation may\nproduce multiple results for each input coding."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pathling import PathlingContext, to_snomed_coding, translate\nfrom pyspark.sql.functions import explode_outer\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv("conditions.csv")\n\ntranslate_result = csv.withColumn(\n        "READ_CODES",\n        translate(\n                to_snomed_coding(csv.CODE),\n                concept_map_uri="http://snomed.info/sct/900000000000207008?"\n                                "fhir_cm=900000000000497000",\n        ).code,\n)\ntranslate_result.select(\n        "CODE", "DESCRIPTION", explode_outer("READ_CODES").alias("READ_CODE")\n).show()\n'))),(0,r.kt)(o.Z,{value:"r",label:"R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\ncsv <- pathling_spark(pc) %>%\n        spark_read_csv(path = 'conditions.csv', header = TRUE)\n\ntranslate_result <- csv %>%\n        mutate(\n                READ_CODES = !!tx_translate(!!tx_to_snomed_coding(CODE),\n                                             concept_map_uri = \"http://snomed.info/sct/900000000000207008?fhir_cm=900000000000497000\")\n        ) %>%\n        mutate(\n                READ_CODES = explode_outer(READ_CODES[['code']])\n        ) %>%\n        select(CODE, DESCRIPTION, READ_CODES) %>%\n        show()\n\npc %>% pathling_disconnect()\n"))),(0,r.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.sql.Terminology._\nimport au.csiro.pathling.library.TerminologyHelpers._\nimport org.apache.spark.sql.functions.explode_outer\n\nval pc = PathlingContext.create()\nval csv = spark.read.csv("conditions.csv")\n\nval translate_result = csv.withColumn(\n    "READ_CODES",\n    translate(\n        toCoding(csv.col("CODE"), "https://snomed.info/sct"),\n        "http://snomed.info/sct/900000000000207008?fhir_cm=900000000000497000",\n        false, null\n    ).getField("code")\n)\ntranslate_result.select(\n    csv.col("CODE"), csv.col("DESCRIPTION"), explode_outer(translate_result.col("READ_CODES")).alias("READ_CODE")\n).show()\n'))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.sql.Terminology.*;\nimport static au.csiro.pathling.library.TerminologyHelpers.*;\nimport static org.apache.spark.sql.functions.explode_outer;\n\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        Dataset<Row> translateResult = csv.withColumn(\n                "READ_CODES",\n                translate(\n                        toCoding(csv.col("CODE"), "https://snomed.info/sct"),\n                        "http://snomed.info/sct/900000000000207008?fhir_cm=900000000000497000",\n                        false, null\n                ).getField("code")\n        );\n        translateResult.select(\n                csv.col("CODE"), csv.col("DESCRIPTION"),\n                explode_outer(translate_result.col("READ_CODES")).alias(\n                        "READ_CODE")\n        ).show();\n    }\n}\n\n')))),(0,r.kt)("p",null,"Results in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"CODE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"READ_CODE"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"65363002"),(0,r.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,r.kt)("td",{parentName:"tr",align:null},"X00ik")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16114001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,r.kt)("td",{parentName:"tr",align:null},"S34..")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"XUjp0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"XUjp0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"43878008"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat"),(0,r.kt)("td",{parentName:"tr",align:null},"A340.")))),(0,r.kt)("h3",{id:"subsumption-testing"},"Subsumption testing"),(0,r.kt)("p",null,'Subsumption test is a fancy way of saying "is this code equal or a subtype of\nthis other code".'),(0,r.kt)("p",null,'For example, a code representing "ankle fracture" is subsumed by another code\nrepresenting "fracture". The "fracture" code is more general, and using it with\nsubsumption can help us find other codes representing different subtypes of\nfracture.'),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"subsumes"),' function allows us to perform subsumption testing on codes within\nour data. The order of the left and right operands can be reversed to query\nwhether a code is "subsumed by" another code.'),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext, Coding, to_snomed_coding, subsumes\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv(\"conditions.csv\")\n\n# 232208008 |Ear, nose and throat disorder|\nleft_coding = Coding('http://snomed.info/sct', '232208008')\nright_coding_column = to_snomed_coding(csv.CODE)\n\ncsv.select(\n        'CODE', 'DESCRIPTION',\n        subsumes(left_coding, right_coding_column).alias('SUBSUMES')\n).show()\n"))),(0,r.kt)(o.Z,{value:"r",label:"R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\ncsv <- pathling_spark(pc) %>%\n        spark_read_csv(path = \'/Users/gri306/Library/CloudStorage/OneDrive-CSIRO/Data/synthea/10k_csv_20210818/csv/conditions.csv\', header = TRUE)\n\ncsv %>%\n        mutate(\n                CODE,\n                DESCRIPTION,\n                # 232208008 |Ear, nose and throat disorder|\n                SUBSUMES = !!tx_subsumes(!!tx_to_snomed_coding("232208008"), !!tx_to_snomed_coding(CODE)),\n                .keep = "none"\n        ) %>%\n        show()\n\npc %>% pathling_disconnect()\n'))),(0,r.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.sql.Terminology._\nimport au.csiro.pathling.library.TerminologyHelpers._\nimport au.csiro.pathling.fhirpath.encoding.CodingEncoding\n\nval pc = PathlingContext.create()\nval csv = spark.read.csv("conditions.csv")\n\ncsv.select(\n    csv.col("CODE"),\n    // 232208008 |Ear, nose and throat disorder|\n    subsumes(\n        CodingEncoding.toStruct(\n            lit(null),\n            lit(SNOMED_URI),\n            lit(null),\n            lit("232208008"),\n            lit(null),\n            lit(null)\n        ),\n        toSnomedCoding(csv.col("CODE"))\n    ).alias("IS_ENT")\n).show()\n'))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.sql.Terminology.*;\nimport static au.csiro.pathling.library.TerminologyHelpers.*;\n\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        csv.select(\n                csv.col("CODE"),\n                // 232208008 |Ear, nose and throat disorder|\n                subsumes(\n                        CodingEncoding.toStruct(\n                                lit(null),\n                                lit(SNOMED_URI),\n                                lit(null),\n                                lit("232208008"),\n                                lit(null),\n                                lit(null)\n                        ),\n                        toSnomedCoding(csv.col("CODE"))\n                ).alias("IS_ENT")\n        ).show();\n    }\n}\n\n')))),(0,r.kt)("p",null,"Results in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"CODE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"IS_ENT"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"65363002"),(0,r.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16114001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"true")))),(0,r.kt)("h3",{id:"retrieving-properties"},"Retrieving properties"),(0,r.kt)("p",null,"Some terminologies contain additional properties that are associated with codes.\nYou can query these properties using the ",(0,r.kt)("inlineCode",{parentName:"p"},"property_of")," function."),(0,r.kt)("p",null,"There is also a ",(0,r.kt)("inlineCode",{parentName:"p"},"display")," function that can be used to retrieve the preferred\ndisplay term for each code."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pathling import PathlingContext, to_snomed_coding, property_of, display, PropertyType\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv("conditions.csv")\n\n# Get the parent codes for each code in the dataset.\nparents = csv.withColumn(\n        "PARENTS",\n        property_of(to_snomed_coding(csv.CODE), "parent", PropertyType.CODE),\n)\n# Split each parent code into a separate row.\nexploded_parents = parents.selectExpr(\n        "CODE", "DESCRIPTION", "explode_outer(PARENTS) AS PARENT"\n)\n# Retrieve the preferred term for each parent code.\nwith_displays = exploded_parents.withColumn(\n        "PARENT_DISPLAY", display(to_snomed_coding(exploded_parents.PARENT))\n)\nwith_displays.show()\n'))),(0,r.kt)(o.Z,{value:"r",label:"R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\ncsv <- pathling_spark(pc) %>%\n        spark_read_csv(path = \'conditions.csv\', header = TRUE)\n\nparents <- csv %>%\n        # Get the parent codes for each code in the dataset. Split each parent code into a separate row.\n        mutate(\n                PARENT = explode_outer(!!tx_property_of(!!tx_to_snomed_coding(CODE), "parent", "code"))\n        ) %>%\n        # Retrieve the preferred term for each parent code.\n        mutate(\n                PARENT = !!tx_display(!!tx_to_snomed_coding(PARENT))\n        ) %>%\n        select(CODE, DESCRIPTION, PARENT) %>%\n        show()\n\npc %>% pathling_disconnect()\n'))),(0,r.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.sql.Terminology\nimport au.csiro.pathling.sql.Terminology._\nimport au.csiro.pathling.library.TerminologyHelpers._\nimport au.csiro.pathling.fhirpath.encoding.CodingEncoding\n\nval pc = PathlingContext.create()\nval csv = spark.read.csv("conditions.csv")\n\n// Get the parent codes for each code in the dataset.\nval parents = csv.withColumn(\n    "PARENTS",\n    property_of(toSnomedCoding(csv.col("CODE")), "parent", "code")\n)\n// Split each parent code into a separate row.\nval exploded_parents = parents.selectExpr(\n    "CODE", "DESCRIPTION", "explode_outer(PARENTS) AS PARENT"\n)\n// Retrieve the preferred term for each parent code.\nval with_displays = exploded_parents.withColumn(\n    "PARENT_DISPLAY", Terminology.display(toSnomedCoding(exploded_parents.col("PARENT")))\n)\nwith_displays.show()\n'))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.sql.Terminology.*;\nimport static au.csiro.pathling.library.TerminologyHelpers.*;\n\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        // Get the parent codes for each code in the dataset.\n        Dataset<Row> parents = csv.withColumn(\n                "PARENTS",\n                property_of(toSnomedCoding(csv.col("CODE")), "parent", "code")\n        );\n        // Split each parent code into a separate row.\n        Dataset<Row> exploded_parents = parents.selectExpr(\n                "CODE", "DESCRIPTION", "explode_outer(PARENTS) AS PARENT"\n        );\n        // Retrieve the preferred term for each parent code.\n        Dataset<Row> with_displays = exploded_parents.withColumn(\n                "PARENT_DISPLAY", Terminology.display(\n                        toSnomedCoding(exploded_parents.col("PARENT")))\n        );\n        with_displays.show();\n    }\n}\n\n')))),(0,r.kt)("p",null,"Results in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"CODE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"PARENT"),(0,r.kt)("th",{parentName:"tr",align:null},"PARENT_DISPLAY"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"65363002"),(0,r.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,r.kt)("td",{parentName:"tr",align:null},"43275000"),(0,r.kt)("td",{parentName:"tr",align:null},"Otitis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"65363002"),(0,r.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,r.kt)("td",{parentName:"tr",align:null},"68996008"),(0,r.kt)("td",{parentName:"tr",align:null},"Disorder of middle ear")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16114001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,r.kt)("td",{parentName:"tr",align:null},"125603006"),(0,r.kt)("td",{parentName:"tr",align:null},"Injury of ankle")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16114001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,r.kt)("td",{parentName:"tr",align:null},"46866001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of lower limb")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"36971009"),(0,r.kt)("td",{parentName:"tr",align:null},"Sinusitis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"281794004"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral upper respiratory tract infection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"363166002"),(0,r.kt)("td",{parentName:"tr",align:null},"Infective disorder of head")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"36971009"),(0,r.kt)("td",{parentName:"tr",align:null},"Sinusitis")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"281794004"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral upper respiratory tract infection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis"),(0,r.kt)("td",{parentName:"tr",align:null},"363166002"),(0,r.kt)("td",{parentName:"tr",align:null},"Infective disorder of head")))),(0,r.kt)("h3",{id:"retrieving-designations"},"Retrieving designations"),(0,r.kt)("p",null,"Some terminologies contain additional display terms for codes. These can be used\nfor language translations, synonyms, and more. You can query these terms using\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"designation")," function."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pathling import PathlingContext, to_snomed_coding, Coding, designation\n\npc = PathlingContext.create()\ncsv = pc.spark.read.csv("conditions.csv")\n\n# Get the synonyms for each code in the dataset.\nsynonyms = csv.withColumn(\n        "SYNONYMS",\n        designation(to_snomed_coding(csv.CODE),\n                    Coding.of_snomed("900000000000013009")),\n)\n# Split each synonyms into a separate row.\nexploded_synonyms = synonyms.selectExpr(\n        "CODE", "DESCRIPTION", "explode_outer(SYNONYMS) AS SYNONYM"\n)\nexploded_synonyms.show()\n'))),(0,r.kt)(o.Z,{value:"r",label:"R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect()\ncsv <- pathling_spark(pc) %>%\n        spark_read_csv(path = 'conditions.csv', header = TRUE)\n\nsynonyms <- csv %>%\n        # Get the synonyms for each code in the dataset.\n        mutate(\n                SYNONYMS = !!tx_designation(!!tx_to_snomed_coding(CODE),\n                                             !!tx_to_snomed_coding(\"900000000000013009\"))\n        ) %>%\n        # Split each synonym into a separate row.\n        mutate(SYNONYM = explode_outer(SYNONYMS)) %>%\n        select(CODE, DESCRIPTION, SYNONYM) %>%\n        show()\n\npc %>% pathling_disconnect()\n"))),(0,r.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.sql.Terminology._\nimport au.csiro.pathling.library.TerminologyHelpers._\nimport org.hl7.fhir.r4.model.Coding\n\nval pc = PathlingContext.create()\nval csv = spark.read.csv("conditions.csv")\n\n// Get the synonyms for each code in the dataset.\nval synonyms = csv.withColumn(\n    "SYNONYMS",\n    designation(toSnomedCoding(csv.col("CODE")),\n        new Coding("http://snomed.info/sct", "900000000000013009", null))\n)\n// Split each synonym into a separate row.\nval exploded_synonyms = synonyms.selectExpr(\n    "CODE", "DESCRIPTION", "explode_outer(SYNONYMS) AS SYNONYM"\n)\nexploded_synonyms.show()\n'))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.sql.Terminology.*;\nimport static au.csiro.pathling.library.TerminologyHelpers.*;\n\nimport au.csiro.pathling.library.PathlingContext;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n\n    public static void main(String[] args) {\n        PathlingContext pc = PathlingContext.create();\n        Dataset<Row> csv = pc.getSpark().read().csv("conditions.csv");\n\n        // Get the synonyms for each code in the dataset.\n        Dataset<Row> synonyms = csv.withColumn(\n                "SYNONYMS",\n                designation(toSnomedCoding(csv.col("CODE")),\n                        new Coding("http://snomed.info/sct",\n                                "900000000000013009", null))\n        );\n        // Split each synonym into a separate row.\n        Dataset<Row> exploded_synonyms = synonyms.selectExpr(\n                "CODE", "DESCRIPTION", "explode_outer(SYNONYMS) AS SYNONYM"\n        );\n        exploded_synonyms.show();\n    }\n}\n')))),(0,r.kt)("p",null,"Results in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"CODE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"SYNONYM"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"65363002"),(0,r.kt)("td",{parentName:"tr",align:null},"Otitis media"),(0,r.kt)("td",{parentName:"tr",align:null},"OM - Otitis media")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16114001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,r.kt)("td",{parentName:"tr",align:null},"Ankle fracture")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16114001"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of ankle"),(0,r.kt)("td",{parentName:"tr",align:null},"Fracture of distal end of tibia and fibula")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis (disorder)"),(0,r.kt)("td",{parentName:"tr",align:null},"NULL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"444814009"),(0,r.kt)("td",{parentName:"tr",align:null},"Viral sinusitis (disorder)"),(0,r.kt)("td",{parentName:"tr",align:null},"NULL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"43878008"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat (disorder)"),(0,r.kt)("td",{parentName:"tr",align:null},"Septic sore throat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"43878008"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat (disorder)"),(0,r.kt)("td",{parentName:"tr",align:null},"Strep throat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"43878008"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat (disorder)"),(0,r.kt)("td",{parentName:"tr",align:null},"Strept throat")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"43878008"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat (disorder)"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal angina")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"43878008"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal sore throat (disorder)"),(0,r.kt)("td",{parentName:"tr",align:null},"Streptococcal pharyngitis")))),(0,r.kt)("h3",{id:"multi-language-support"},"Multi-language support"),(0,r.kt)("p",null,"The library enables communication of a preferred language to the terminology\nserver using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept-Language")," HTTP header, as described\nin ",(0,r.kt)("a",{parentName:"p",href:"https://hl7.org/fhir/R4/languages.html#http"},"Multi-language support in FHIR"),".\nThe header may contain multiple languages, with weighted preferences as defined\nin ",(0,r.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc9110.html#name-accept-language"},"RFC 9110"),".\nThe server can use the header to return the result in the preferred language if\nit is able. The actual behaviour may depend on the server implementation and the\ncode systems used."),(0,r.kt)("p",null,"The default value for the header can be configured during the creation of\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"PathlingContext")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"accept_language")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"acceptLanguage")," parameter.\nThe parameter with the same name can also be used to override the default value\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"display()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"property_of()")," functions."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pathling import PathlingContext, to_loinc_coding, property_of, display\n\n# Configure the default language preferences to prioritise French.\npc = PathlingContext.create(accept_language="fr;q=0.9,en;q=0.5")\ncsv = pc.spark.read.csv("observations.csv")\n\n# Get the display names with default language preferences (in French).\ndef_display = csv.withColumn(\n        "DISPLAY", display(to_loinc_coding(csv.CODE))\n)\n\n# Get the `display` property values with German as the preferred language.\ndef_and_german_display = def_display.withColumn(\n        "DISPLAY_DE",\n        property_of(to_loinc_coding(csv.CODE), "display",\n                    accept_language="de-DE"),\n)\ndef_and_german_display.show()\n'))),(0,r.kt)(o.Z,{value:"r",label:"R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library(sparklyr)\nlibrary(pathling)\n\n# Configure the default language preferences to prioritise French.\npc <- pathling_connect(accept_language = "fr;q=0.9,en;q=0.5")\ncsv <- pathling_spark(pc) %>%\n        spark_read_csv(path = "observations.csv", header = TRUE)\n\ncsv %>%\n        # Get the display names with default language preferences (in French).\n        mutate(\n                DISPLAY = !!tx_display(!!tx_to_loinc_coding(CODE))\n        ) %>%\n        # Get the `display` property values with German as the preferred language.\n        mutate(\n                DISPLAY_DE = explode_outer(!!tx_property_of(!!tx_to_loinc_coding(CODE), "display", "string", accept_language = "de-DE"))\n        ) %>%\n        select(CODE, DESCRIPTION, DISPLAY, DISPLAY_DE) %>%\n        show()\n\npc %>% pathling_disconnect()\n'))),(0,r.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.PathlingContext\nimport au.csiro.pathling.config.TerminologyConfiguration;\nimport au.csiro.pathling.sql.Terminology\nimport au.csiro.pathling.sql.Terminology._\nimport au.csiro.pathling.library.TerminologyHelpers._\n\n// Configure the default language preferences to prioritise French.\nval pc = PathlingContext.create(\n    TerminologyConfiguration.builder()\n            .acceptLangage("fr;q=0.9,en;q=0.5").build()\n);\nval csv = spark.read.csv("observations.csv")\n\n// Get the display names with default language preferences (in French).\nval defDisplay = csv.withColumn(\n    "DISPLAY",\n    display(toLoincCoding(csv.col("CODE")))\n)\n// Get the `display` property values with German as the preferred language.\nval defAndGermanDisplay = defDisplay.withColumn(\n    "DISPLAY_DE", property_of(toLoincCoding(csv.col("CODE")), "display", "string", "de-DE")\n)\ndefAndGermanDisplay.show()\n'))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import static au.csiro.pathling.sql.Terminology.*;\nimport static au.csiro.pathling.library.TerminologyHelpers.*;\n\nimport au.csiro.pathling.library.PathlingContext;\nimport au.csiro.pathling.config.TerminologyConfiguration;\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Row;\n\nclass MyApp {\n\n    public static void main(String[] args) {\n        // Configure the default language preferences to prioritise French.\n        PathlingContext pc = PathlingContext.create(\n                TerminologyConfiguration.builder()\n                        .acceptLangage("fr;q=0.9,en;q=0.5").build()\n        );\n        Dataset<Row> csv = pc.getSpark().read().csv("observations.csv");\n\n        // Get the display names with default language preferences (in French).\n        Dataset<Row> defDisplay = csv.withColumn(\n                "DISPLAY",\n                display(toLoincCoding(csv.col("CODE")))\n        );\n\n        // Get the `display` property values with German as the preferred language.\n        Dataset<Row> defAndGermanDisplay = defDisplay.withColumn(\n                "DISPLAY_DE",\n                property_of(toLoincCoding(csv.col("CODE")), "display", "string",\n                        "de-DE")\n        );\n        defAndGermanDisplay.show();\n    }\n}\n')))),(0,r.kt)("p",null,"Results in:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"CODE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"DISPLAY"),(0,r.kt)("th",{parentName:"tr",align:null},"DISPLAY_DE"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8302-2"),(0,r.kt)("td",{parentName:"tr",align:null},"Body Height"),(0,r.kt)("td",{parentName:"tr",align:null},"Taille du patient ","[","Longueur] Patient ; Num\xe9rique"),(0,r.kt)("td",{parentName:"tr",align:null},"K\xf6rpergr\xf6\xdfe")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"29463-7"),(0,r.kt)("td",{parentName:"tr",align:null},"Body Weight"),(0,r.kt)("td",{parentName:"tr",align:null},"Poids corporel ","[","Masse] Patient ; Num\xe9rique"),(0,r.kt)("td",{parentName:"tr",align:null},"K\xf6rpergewicht")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"718-7"),(0,r.kt)("td",{parentName:"tr",align:null},"Hemoglobin ","[","Mass/volume] in Blood"),(0,r.kt)("td",{parentName:"tr",align:null},"H\xe9moglobine ","[","Masse/Volume] Sang ; Num\xe9rique"),(0,r.kt)("td",{parentName:"tr",align:null},"H\xe4moglobin ","[","Masse/Volumen] in Blut")))),(0,r.kt)("h3",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Pathling can be configured to connect to a protected terminology server by\nsupplying a set of OAuth2 client credentials and a token endpoint."),(0,r.kt)("p",null,"Here is an example of how to authenticate to\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://ontology.nhs.uk/"},"NHS terminology server"),":"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from pathling import PathlingContext\n\npc = PathlingContext.create(\n        terminology_server_url='https://ontology.nhs.uk/production1/fhir',\n        token_endpoint='https://ontology.nhs.uk/authorisation/auth/realms/nhs-digital-terminology/protocol/openid-connect/token',\n        client_id='[client ID]',\n        client_secret='[client secret]'\n)\n"))),(0,r.kt)(o.Z,{value:"r",label:"R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library(sparklyr)\nlibrary(pathling)\n\npc <- pathling_connect(\n        terminology_server_url = "https://ontology.nhs.uk/production1/fhir",\n        token_endpoint = "https://ontology.nhs.uk/authorisation/auth/realms/nhs-digital-terminology/protocol/openid-connect/token",\n        client_id = "[client ID]",\n        client_secret = "[client secret]"\n)\n'))),(0,r.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import au.csiro.pathling.library.{PathlingContext, PathlingContextConfiguration}\n\nval config = PathlingContextConfiguration.builder()\n        .terminologyServerUrl("https://ontology.nhs.uk/production1/fhir")\n        .tokenEndpoint("https://ontology.nhs.uk/authorisation/auth/realms/nhs-digital-terminology/protocol/openid-connect/token")\n        .clientId("[client ID]")\n        .clientSecret("[client secret]")\n        .build()\nval pc = PathlingContext.create(config)\n'))),(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import au.csiro.pathling.library.PathlingContext;\nimport au.csiro.pathling.library.PathlingContextConfiguration;\n\nclass MyApp {\n\n    public static void main(String[] args) {\n        PathlingContextConfiguration config = PathlingContextConfiguration.builder()\n                .terminologyServerUrl(\n                        "https://ontology.nhs.uk/production1/fhir")\n                .tokenEndpoint(\n                        "https://ontology.nhs.uk/authorisation/auth/realms/nhs-digital-terminology/protocol/openid-connect/token")\n                .clientId("[client ID]")\n                .clientSecret("[client secret]")\n                .build();\n        PathlingContext pc = PathlingContext.create(config);\n        // ...\n    }\n}\n\n')))))}g.isMDXComponent=!0}}]);