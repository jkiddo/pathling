"use strict";(self.webpackChunkpathling_site=self.webpackChunkpathling_site||[]).push([[983],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9150:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:7,description:"Pathling supports Kafka as a streaming data source, and all the operations available within the library are able to execute continuously across a stream of data."},o="Kafka integration",s={unversionedId:"libraries/kafka",id:"libraries/kafka",title:"Kafka integration",description:"Pathling supports Kafka as a streaming data source, and all the operations available within the library are able to execute continuously across a stream of data.",source:"@site/docs/libraries/kafka.md",sourceDirName:"libraries",slug:"/libraries/kafka",permalink:"/docs/libraries/kafka",draft:!1,editUrl:"https://github.com/aehrc/pathling/tree/main/site/docs/libraries/kafka.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,description:"Pathling supports Kafka as a streaming data source, and all the operations available within the library are able to execute continuously across a stream of data."},sidebar:"libraries",previous:{title:"Terminology functions",permalink:"/docs/libraries/terminology"},next:{title:"pathling-client",permalink:"/docs/libraries/javascript/pathling-client"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kafka-integration"},"Kafka integration"),(0,r.kt)("p",null,"Pathling supports ",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/"},"Kafka")," as a streaming data source,\nand all the operations available within the library are able to execute\ncontinuously across a stream of data."),(0,r.kt)("p",null,"Here is an example of streaming a source of FHIR data, encoding it and then\nperforming a terminology operation upon it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pathling import PathlingContext, Coding, subsumes\n\npc = PathlingContext.create()\n\n# Subscribe to a stream of FHIR Bundles from a Kafka topic.\ndf = (\n    pc.spark.readStream.format("kafka")\n    .option("kafka.bootstrap.servers", "kafka:9092")\n    .option("subscribe", "some-topic")\n    .load()\n    .selectExpr("CAST(value AS STRING) as json_bundle")\n)\n\n# Pull out the MedicationAdministration resources and put them into a dataset.\nmed_administrations = (\n    pc.encode_bundle(df, "MedicationAdministration")\n    .selectExpr(\n        "id", "status",\n        "EXPLODE_OUTER(medicationCodeableConcept.coding) as coding"\n    )\n)\n\n# Perform a subsumes operation on the medication coding to determine whether it is a type of\n# anti-coagulant.\nresult = med_administrations.select(\n    med_administrations.id,\n    med_administrations.status,\n    med_administrations.coding,\n    subsumes(\n        # 372862008 |Anticoagulant|\n        left_coding=Coding("http://snomed.info/sct", "372862008"),\n        right_coding_column="coding",\n    ).alias("is_anticoagulant"),\n)\n')),(0,r.kt)("p",null,"For more information about Spark's Kafka integration, see\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/structured-streaming-kafka-integration.html"},"Structured Streaming + Kafka Integration Guide"),"."))}d.isMDXComponent=!0}}]);